fun uploadKycDocument(fileName: String, userLocationCode: String) {
        val decodedBitmap = BitmapFactory.decodeFile(filePath)
        val compressedFile = createImageFile(fileName)
        decodedBitmap?.let {
            writeBitmapToFile(decodedBitmap, compressedFile)
        }

        if (!compressedFile.sizeAllowed()) {
            viewModelScope.launch {
                enbdImageCompressor.compress(imageFile = compressedFile) {
                    size(DAO_MAX_ALLOWED_UPLOAD_IMAGE_SIZE)
                }
            }
        }
        kycDocument = filePath
        uploadManualCapture(UserCountryCode(userLocationCode))

    }



I hope this email finds you well. I am writing to request approval to work from home for the period of 26th February 2024 to 8th March 2024 due to some urgent and important matters that require my presence.

I assure you that I am fully equipped to fulfill my responsibilities remotely and will remain accessible during regular working hours. If there are any pressing matters that require my physical presence at the office during this time, I am committed to returning immediately.

Your understanding and approval of this request are greatly appreciated. Please let me know if you need any further details or if there are specific procedures to follow.

Thank you for your consideration.


I hope this message finds you well. I'd like to highlight a critical issue in the ENBD login page that's affecting Liv users. When users return to the login screen from the DAO flow or after logging out, the Login and "Apply for an Account" buttons become invisible. Users are forced to exit the application to proceed.

Please refer to the attached screenshot for clarity.

[Attach Screenshot]

This issue is causing significant user inconvenience. I kindly request your prompt attention to address and resolve this matter urgently.

Thank you for your swift action on this.

Best regards,


The problem arises when users navigate back to the login screen from the DAO flow or after logging out. In this scenario, the Login button and the "Apply for an Account" buttons are not visible. Users are unable to proceed with logging in again or continuing with the DAO flow without exiting the application.


Changes: 
DashboardHomeBannerExtension
At Line 301:


else if (cmsDashboardBanner?.id.equals(DashboardConstants.BannerType.ACTIVATE_DEBIT_CARD) && !cmsDashboardBanner?.displayInDashboard.safeGet()){
                        cmsDashboardBanner?.let {
                            DashboardBanner(
                                bannerId = it.id,
                                type = DashboardConstants.BannerType.ACTIVATE_DEBIT_CARD,
                                title = it.title,
                                description = it.description,
                                buttonText = it.ctaText?.convertHtmlToText(),
                                bannerType = BannerMessageTypes.BANNERICONINVISIBLE,
                                isDismissible = it.dismissible,
                                displayInDashboard = true,
                                smartPassCheckEnabled = it.smartPassCheckEnabled,
                                cmsMediaKey = DAOBANNERICON
                            )
                        }
                    }

LivXDashboardFragment: 
Line 1098: DashboardConstants.BannerType.ACTIVATE_DEBIT_CARD -> {
                    deepLinkManager.navigateToDestination(DeepLinkManager.ACTIVATE_DEBIT_CARD) // regarding this I have a doubt if this will work or not.
                }

DashboardConstants: 

const val ACTIVATE_DEBIT_CARD = "cardsservice"



DeepLinkManager:
const val ACTIVATE_DEBIT_CARD = "/cardsservice?topic=service-new-request-debit-cards&subTopic=service-new-request-debit-cards-activate-card"

findNavController().popBackStack(R.id.label_prelogin, false)

enum class DaoStagesEnums(val stage: Int) {
    NATIONAL_ID_CAPTURE(R.id.label_eida_verification_fragment),
    PASSPORT_CAPTURE(R.id.label_eida_verification_fragment),
    SELFIE_CAPTURE(R.id.label_action_personalinfo_contact),
    OTP_VERIFICATION_MOBILE(R.id.label_action_personalinfo_contact),
    OTP_VERIFICATION_EMAIL(R.id.label_action_personalinfo_contact),
    START_SOURCING(R.id.label_company_address_fragment),
    DEMOGRAPHIC_DETAILS(R.id.label_kyc_information_fragment),
    PROFESSIONAL_DETAILS(R.id.label_open_account_fragment),
    PACKAGE_SELECTION(R.id.label_customize_your_card_fragment),
    PRODUCT_SELECTION(R.id.label_customize_your_card_fragment),
    APPLICATION_SUBMISSION(R.id.label_set_new_password_fragment),
    T_AND_C(R.id.label_residency_information_fragment)
}

DashboardConstants.BannerType.ACTIVATE_DEBIT_CARD -> {
    val inactiveCard = injectedViewModel.cardManager.debitCards.value?.peek()?.firstOrNull { cardItem ->
        cardItem.status == CardStatus.INACTIVE
    } ?: injectedViewModel.cardManager.creditCards.value?.peek()?.firstOrNull { cardItem ->
        cardItem.status == CardStatus.INACTIVE
    }

    cardsViewModel.selectedCard.value = inactiveCard

    cardFlowGraph.setStartDestination(R.id.label_activate_card)
    findNavController().navigate(R.id.action_global_cards_flow)
}


 <!-- custom_radio_button.xml -->
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="vertical">

    <!-- First line -->
    <TextView
        android:id="@+id/text1"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textSize="16sp"
        android:textStyle="bold"
        android:text="Enroll for Switch Offer"
        android:textColor="@android:color/black"/>

    <!-- Second line -->
    <TextView
        android:id="@+id/text2"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textSize="14sp"
        android:text="Earn up to AED"
        android:textColor="@android:color/darker_gray"/>

    <!-- Third line -->
    <TextView
        android:id="@+id/text3"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textSize="12sp"
        android:text="Learn More"
        android:textColor="@android:color/gray"/>
</LinearLayout>


Could you please provide Rupali Vitthal Londhe (IT) with the tasks related to DAO so she can add them?

f (it.isEmpty()) {
                        setErrorLabelText(
                            getCmsString(
                                CmsKeyMapper.INVALIDAVGMONTHLYSALARY,
                                arrayListOf(injectedViewModel.averageMonthlyBalance)
                            )
                        )
                    } else {
                        setErrorLabelText(
                            getCmsString(
                                CmsKeyMapper.LOWAVGMONTHLYSALARY,
                                arrayListOf(injectedViewModel.averageMonthlyBalance)
                            )
                        )
                    }



{
  "data": [
    {
      "description": "Welcome to a package that provides enhanced transactional benefits. Your New account comes with",
      "links": [
        {
          "text": "Welcome to a ",
          "isMandatory": true,
          "url": "\/data\/common\/site-assets\/error-messages\/err_settings_cust_maxotpattempts_expired"
        },
        {
          "text": "enhanced transactional benefits",
          "isMandatory": false,
          "url": "\/data\/common\/site-assets\/error-messages\/err_settings_cust_maxotparrived"
        }
      ]
    },
    {
      "description": "Welcome to a package that provides enhanced transactional benefits. Your New account comes with",
      "links": [
        {
          "text": "Welcome to a ",
          "isMandatory": true,
          "url": "\/data\/common\/site-assets\/error-messages\/err_settings_cust_maxemailarrived"
        }
      ]
    }
  ]
}

val jsonString = """
        {
          "data": [
            {
              "description": "Welcome to a package that provides enhanced transactional benefits. Your New account comes with",
              "links": [
                {
                  "text": "Welcome to a ",
                  "isMandatory": true,
                  "url": "/data/common/site-assets/error-messages/err_settings_cust_maxotpattempts_expired"
                },
                {
                  "text": "enhanced transactional benefits",
                  "isMandatory": false,
                  "url": "/data/common/site-assets/error-messages/err_settings_cust_maxotparrived"
                }
              ]
            },
            {
              "description": "Welcome to a package that provides enhanced transactional benefits. Your New account comes with",
              "links": [
                {
                  "text": "Welcome to a ",
                  "isMandatory": true,
                  "url": "/data/common/site-assets/error-messages/err_settings_cust_maxemailarrived"
                }
              ]
            }
          ]
        }
    """.trimIndent()

    // Parse JSON string using Gson
    val gson = Gson()
    val response = gson.fromJson(jsonString, ApiResponse::class.java)

class DaoTncDynamicConsentViewHolder(
    private val daoTncDynamicConsentItemBinding: DaoTncDynamicConsentItemBinding,
) : BaseVH<DaoTncDynamicConsentItemResponse>(daoTncDynamicConsentItemBinding.root) {
    override fun bindItem(item: DaoTncDynamicConsentItemResponse) {
        daoTncDynamicConsentItemBinding.item = item
    }
}

<?xml version="1.0" encoding="utf-8"?>
<layout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools">

    <data>
        <variable
            name="item"
            type="com.emiratesnbd.core.data.repository.dao.tnc.model.DaoTncDynamicConsentItemResponse" />
    </data>

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content">

        <com.enbd.uicomponents.components.textview.EnbdTextView
            android:id="@+id/textViewKfsBullet"
            style="@style/EnbdTextView.FontSize5"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginHorizontal="@dimen/spacingXSmall"
            android:gravity="center"
            android:text="@{item.bulletPoint}"
            android:textColor="@color/gray800"
            app:layout_constraintEnd_toStartOf="@+id/textViewKfs"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="@+id/textViewKfs"
            tools:text="\u2022" />

        <com.enbd.uicomponents.components.textview.EnbdTextView
            android:id="@+id/textViewKfs"
            style="@style/EnbdTextView.FontSize5"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:gravity="start"
            android:textColor="@color/gray800"
            android:text="@{item.description}"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toEndOf="@id/textViewKfsBullet"
            app:layout_constraintTop_toTopOf="parent"
            tools:text="Welcome to a package that provides enhanced transactional benefits. Your New account comes with" />

    </androidx.constraintlayout.widget.ConstraintLayout>
</layout>

 class DaoTncDynamicConsentViewHolder(
    private val daoTncDynamicConsentItemBinding: DaoTncDynamicConsentItemBinding,
) : BaseVH<DaoTncDynamicConsentItemResponse>(daoTncDynamicConsentItemBinding.root) {

    override fun bindItem(item: DaoTncDynamicConsentItemResponse) {
        // Convert hyperlinks to clickable spannable text
        val clickableDescription = makeDescriptionClickable(item)
        daoTncDynamicConsentItemBinding.textViewKfs.text = clickableDescription
        daoTncDynamicConsentItemBinding.textViewKfs.movementMethod = LinkMovementMethod.getInstance()
    }

    private fun makeDescriptionClickable(item: DaoTncDynamicConsentItemResponse): SpannableString {
        val description = item.description
        val spannableString = SpannableString(description)

        // Iterate through links and make them clickable
        item.links.forEach { link ->
            val startIndex = description.indexOf(link.text)
            val endIndex = startIndex + link.text.length
            spannableString.setSpan(object : ClickableSpan() {
                override fun onClick(widget: View) {
                    // Handle link click event here
                    // You may want to open the link or perform some other action
                }
            }, startIndex, endIndex, SpannableString.SPAN_EXCLUSIVE_EXCLUSIVE)
        }

        return spannableString
    }
}



fun areAllLinksNotMandatory(data: List<DaoTncDynamicConsentItemResponse>): Boolean {
    for (item in data) {
        for (link in item.links) {
            if (link.isMandatory) {
                // If any link is mandatory, return false
                return false
            }
        }
    }
    // If no link is mandatory, return true
    return true
}




flavorDimensions  = ['app']

    productFlavors {
        enbd {
            dimension 'app'
            buildConfigField("String", "LOCAL_COUNTRY_CODE", "\"AE\"")
            buildConfigField("String", "LOCAL_CURRENCY_CODE", "\"AED\"")
        }

        ei {
            dimension 'app'
            buildConfigField("String", "LOCAL_COUNTRY_CODE", "\"AE\"")
            buildConfigField("String", "LOCAL_CURRENCY_CODE", "\"AED\"")
        }
    }



fun mapCountriesListToItem(
        countries: List<CmsCountry>?,
        countriesToBeFiltered: Array<BasicRecyclerViewItem>?,
        selectedCountryType: DaoSelectedCountryEnums
    ): List<BasicRecyclerViewItem> {
        return countries?.let {
            val countriesList =
                countrySelectionMapper.mapCmsCountryItemToBaseRecyclerItemDao(
                    it,
                    selectedCountryType
                )
            countriesToBeFiltered?.let { filteredCountries ->
                countriesList.minus(filteredCountries.toList()) { country -> country.id }
            } ?: run {
                countrySelectionMapper.mapCmsCountryItemToBaseRecyclerItemDao(
                    it,
                    selectedCountryType
                )
            }
        } ?: emptyList()
    }
