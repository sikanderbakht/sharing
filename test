it('should navigate to DAO Instruction screen when navigateToDaoInstruction is called', async () => {
        const daoButton = await driver.$('~navigateToDaoButton'); // Assuming you have a button or element to trigger this navigation
        await daoButton.click();

        const daoScreen = await driver.$('~daoInstructionScreen');
        await daoScreen.waitForDisplayed({ timeout: 5000 });

        expect(await daoScreen.isDisplayed()).toBe(true);
    });

    it('should show resume dialog when revisitFlag is set and passSet is true', async () => {
        // Simulate revisitFlag being set
        const revisitFlagButton = await driver.$('~simulateRevisitFlagTrue'); // Assuming a button to simulate this
        await revisitFlagButton.click();

        const resumeDialog = await driver.$('~resumeDialog');
        await resumeDialog.waitForDisplayed({ timeout: 5000 });

        expect(await resumeDialog.isDisplayed()).toBe(true);

        const positiveButton = await driver.$('~positiveButton');
        await positiveButton.click();

        const applicationStagesScreen = await driver.$('~applicationStagesScreen');
        await applicationStagesScreen.waitForDisplayed({ timeout: 5000 });

        expect(await applicationStagesScreen.isDisplayed()).toBe(true);
    });

    it('should show dialog and create new DAO application when passSet is false and user selects "Create New Application"', async () => {
        // Simulate revisitFlag being set
        const revisitFlagButton = await driver.$('~simulateRevisitFlagFalse'); // Assuming a button to simulate this
        await revisitFlagButton.click();

        const createNewAppDialog = await driver.$('~createNewAppDialog');
        await createNewAppDialog.waitForDisplayed({ timeout: 5000 });

        const negativeButton = await driver.$('~negativeButton');
        await negativeButton.click();

        const loadingIndicator = await driver.$('~loadingIndicator');
        await loadingIndicator.waitForDisplayed({ timeout: 5000 });

        expect(await loadingIndicator.isDisplayed()).toBe(true);
    });



private fun navigateToDaoInstruction() {
        findNavController().safeNavigate(
            LoginHomeFragmentDirections.actionDao()
        )
    }

revisitFlag.observe(viewLifecycleOwner, EventObserver { isDedupe ->
                sendDaoFcmToken()
                if (isDedupe.revisitFlag) {
                    showResumeDialog(isDedupe.isPassSet)
                } else {
                    findNavController().safeNavigate(
                        LoginHomeFragmentDirections.actionDao()
                    )
                }
            })

private fun showResumeDialog(passSet: Boolean) {
        if (passSet) {
            DialogUtils.showInfoDialog(
                context = requireContext(),
                title = getCmsString(CmsKeyMapper.DAOAPPLICATIONSTARTED),
                message = getCmsString(CmsKeyMapper.DAOAPPLICATIONMESSAGE),
                buttonName = getCmsString(CmsKeyMapper.DAORESUMEAPPLICATION),
                alertDialogListener = object : AlertDialogListener {
                    override fun onPositive() {
                        injectedViewModel.getApplicationStages()
                    }
                }
            )
        } else {
            DialogUtils.twoButtonDialog(
                context = requireContext(),
                title = getCmsString(CmsKeyMapper.DAOAPPLICATIONSTARTED),
                message = getCmsString(CmsKeyMapper.DAOAPPLICATIONMESSAGE),
                negativeButtonText = getCmsString(CmsKeyMapper.DAOCREATENEWPPLICATION),
                positiveButtonText = getCmsString(CmsKeyMapper.DAORESUMEAPPLICATION),
                alertDialogListener = object : AlertDialogListener {
                    override fun onNegative() {
                        injectedViewModel.createNewDaoApplication()
                    }

                    override fun onPositive() {
                        injectedViewModel.getApplicationStages()
                    }
                }
            )
        }
    }

fun createNewDaoApplication() {
        showLoading.postValue(Event(true))
        addDisposable(createNewDaoApplicationUseCase.execute(CreateNewDaoApplicationSubscriber()))
    }

private fun navigateToDaoInstruction() {
        findNavController().safeNavigate(
            LoginHomeFragmentDirections.actionDao()
        )
    }

<?xml version="1.0" encoding="utf-8"?>

<layout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:bind="http://schemas.android.com/tools"
    xmlns:tools="http://schemas.android.com/tools">

    <data>

        <import type="android.view.View" />

        <variable
            name="viewModel"
            type="com.emiratesnbd.mobile.ui.home.fragment.accounts.opening.OpenNewAccountViewModel" />
    </data>

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <include
            android:id="@+id/toolbarOpenNewAccount"
            layout="@layout/custom_v2_toolbar"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            bind:item="@{viewModel.customV2ToolbarItem}" />

        <androidx.core.widget.NestedScrollView
            android:layout_width="match_parent"
            android:layout_height="0dp"
            android:fillViewport="true"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@+id/toolbarOpenNewAccount">

            <androidx.constraintlayout.widget.ConstraintLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:focusable="true">

                <androidx.appcompat.widget.AppCompatTextView
                    android:id="@+id/textViewHeaderChooseAccount"
                    style="@style/FontSize5Light"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:layout_marginStart="@dimen/spacingXxLarge"
                    android:layout_marginTop="@dimen/spacingXxxLarge"
                    android:layout_marginEnd="@dimen/spacingXxLarge"
                    android:text="@{viewModel.headerText}"
                    app:layout_constraintEnd_toEndOf="parent"
                    app:layout_constraintStart_toStartOf="parent"
                    app:layout_constraintTop_toTopOf="parent"
                    tools:text="Choose from our wide range of Accounts" />

                <androidx.recyclerview.widget.RecyclerView
                    android:id="@+id/recyclerViewNewAccount"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:layout_marginTop="@dimen/spacingMedium"
                    android:clipToPadding="false"
                    android:nestedScrollingEnabled="false"
                    app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
                    app:layout_constraintTop_toBottomOf="@+id/textViewHeaderChooseAccount"
                    tools:itemCount="2"
                    android:paddingBottom="@dimen/spacingXxxLarge"
                    tools:listitem="@layout/layout_new_account_item"
                    tools:visibility="visible" />

            </androidx.constraintlayout.widget.ConstraintLayout>
        </androidx.core.widget.NestedScrollView>
    </androidx.constraintlayout.widget.ConstraintLayout>
</layout>

class OpenNewAccountFragment :
    BaseFragment<FragmentOpenNewAccountBinding, OpenNewAccountViewModel>(),
    ItemClickListener {

    override val bindingVariable = BR.viewModel

    override val viewModel = OpenNewAccountViewModel::class.java

    private val accountOpeningSharedViewModel: AccountOpeningSharedViewModel by navGraphViewModels(
        R.id.account_opening_navigation
    ) { viewModelFactory }

    private val termsAndConditionsSharedViewModel: TermsAndConditionsSharedViewModel by navGraphViewModels(
        R.id.account_opening_navigation
    ) { viewModelFactory }

    private lateinit var newAccountTypeAdapter: NewAccountTypeAdapter

    @Inject
    lateinit var userManager: UserManager

    private val safeArgs: OpenNewAccountFragmentArgs by navArgs()
    private lateinit var openNewAccountSharedViewModel: OpenNewAccountSharedViewModel
    override fun getLayoutId() = R.layout.fragment_open_new_account

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        (activity as DaggerAppCompatActivity).apply {
            openNewAccountSharedViewModel =
                initViewModel(OpenNewAccountSharedViewModel::class.java, factory = viewModelFactory)
        }
        accountOpeningSharedViewModel.cddUpdateDone = false
    }

    override fun initUserInterface(rootView: View) {
        initToolbar()
        initRecyclerView()
        injectedViewModel.setPageTexts()
        initObservers()
    }

    private fun initToolbar() {
        injectedViewModel.apply {
            setupCustomV2Toolbar(
                getCmsString(CmsKeyMapper.ACCOUNTOPENINGOPENNEWACCOUNT),
                leftButtonDrawable = RUiComponent.drawable.ic_v2_back_button
            )
            onToolbarLeftButtonClickEvent.observe(viewLifecycleOwner) {
                if (popBackOrGoToHome().not()) activity?.goBackToHome()
            }
        }
    }

    private fun initRecyclerView() {
        newAccountTypeAdapter = NewAccountTypeAdapter(clickListener = this)
        viewDataBinding.recyclerViewNewAccount.apply {
            setup()
            adapter = newAccountTypeAdapter
            setHasFixedSize(true)
        }

        if (safeArgs.accountTypeListData == null) {
            openNewAccountSharedViewModel.accountTypeList.accountTypes.let {
                newAccountTypeAdapter.setItems(it.toArrayList().apply {
                    removeIf{item -> item.productList.isNullOrEmpty()
                            // Joint Account will be added even if it has no products
                            && item.accountType != AccountTypeStringDef.JOINT }
                })
            }
        } else {
            safeArgs.accountTypeListData?.accountTypes?.let {
                newAccountTypeAdapter.setItems(it.toArrayList().apply {
                    removeIf{item -> item.productList.isNullOrEmpty()}
                })
            }
        }
    }

    override fun onItemClick(position: Int, view: View) {
        newAccountTypeAdapter.getItems()[position].let {
            if (it.accountType == AccountTypeStringDef.JOINT) {

                injectedViewModel.checkJointAccountEligibility()

            } else if (BuildConfig.FLAVOR_app == AppConstants.Flavors.LIV && it.accountType.equalsIgnoreCase(
                    AccountTypeStringDef.GAME_ON_DEPOSIT
                )
            ) {
                (findNavController().graph.findNode(R.id.account_opening_navigation) as? NavGraph)?.let { navGraph ->
                    navGraph.setStartDestination(
                        R.id.label_game_deposit_campaign_page
                    )
                    findNavController().safeNavigate(
                        R.id.global_action_account_opening, NewAccountTypeFragmentArgs(
                            accountOpenTypeListData = AccountOpenTypeListData(
                                if (safeArgs.accountTypeListData?.eligibleCards == null) {
                                    openNewAccountSharedViewModel.accountTypeList.eligibleCards
                                } else {
                                    safeArgs.accountTypeListData?.eligibleCards
                                }, newAccountTypeAdapter.getItems()[position]
                            ),
                            flowType = NEW_ACCOUNT_OPENING_ACCOUNT_TYPE,
                            selectedAccount = ApplyNowResponse.ApplyNowIDs.DEPOSIT_CAMPAIGN,
                        ).toBundle()
                    )
                }
            } else if (it.accountType == AccountTypeStringDef.JOINT) {
                injectedViewModel.checkJointAccountEligibility()
            }  else if (BuildConfig.FLAVOR_app == AppConstants.Flavors.LIV && it.accountType.equalsIgnoreCase(
                    AccountTypeStringDef.LITE
                )
            ) {
                //me.commonx.android.utils.InsiderUtils.setLiteServiceEntryPointAttributes(true)
                val bundle = Bundle()
                bundle.putString(
                    CommonModuleConstants.BundleConstants.USER_LOCATION, String.empty
                )
                bundle.putString(
                    CommonModuleConstants.BundleConstants.NATIONALITY,
                    userManager.userItem.value?.nationalityCode.safeGet()
                )
                val args = ModularArgsModel(
                    navLayout = me.featuresx.android.R.navigation.lite_onboarding_navigation,
                    navDestination = me.featuresx.android.R.id.liteOnboardingParentFragment,
                    navBundle = bundle,
                    setDefaultGraph = false
                )
                findNavController().navigate(
                    OpenNewAccountFragmentDirections.actionToLiteOnboadingParent(
                        data = args
                    )
                )
            }  else if (!it.accountType.equalsIgnoreCase(AccountTypeStringDef.LITE)) {
                accountOpeningSharedViewModel.selectedAccountType = it

                accountOpeningSharedViewModel.eligibleCards =
                    if (safeArgs.accountTypeListData?.eligibleCards == null) {
                        openNewAccountSharedViewModel.accountTypeList.eligibleCards
                    } else {
                        safeArgs.accountTypeListData?.eligibleCards
                    }
                accountOpeningSharedViewModel.eligibleCardsListForAccounts =
                    accountOpeningSharedViewModel.eligibleCards
                findNavController().safeNavigate(
                    OpenNewAccountFragmentDirections.actionNewAccountType(
                        flowType = NEW_ACCOUNT_OPENING_ACCOUNT_TYPE
                    )
                )
            }
            else {

            }
        }
    }

    private fun initObservers() {
        injectedViewModel.onCheckJointAccountEligibility.observe(viewLifecycleOwner) {
            when (it) {
                is SuffixJointAccountUIState.ApiFailureError -> {
                    toggleLoadingDialog(false)
                    it.message.showErrorDialog()
                }

                is SuffixJointAccountUIState.Loading -> {
                    toggleLoadingDialog(true)
                }

                is SuffixJointAccountUIState.Success<*> -> {
                    toggleLoadingDialog(false)
                    // in Liv we navigate to T&C first then start Joint Account flow
                    termsAndConditionsSharedViewModel.setNavDirectionsAfterAcceptSuccess(
                        OpenNewAccountFragmentDirections.globalActionSuffixJointAccountNavigation()
                    )
                    findNavController().safeNavigate(getTncNavDirection())
                }
            }
        }
    }

    private fun getTncNavDirection(): NavDirections {
        return OpenNewAccountFragmentDirections.actionNativeTermsAndConditions(
            termsAndConditionUrl = "${TermsAndConditionUrlEnums.JOINT_ACCOUNT.value}${cmsManager.appLanguage}",
            toolBarTitle = getCmsString(CmsKeyMapper.TERMSANDCONDITIONS),
            isMandateToAccept = true,
            userJourneyType = UserJourneyType.JOINT_ACCOUNT_SERVICES,
            infoTextVisibility = true,
            accountType = AccountTypeStringDef.JOINT
        )
    }
}



fun uploadKycDocument(fileName: String, userLocationCode: String) {
        val decodedBitmap = BitmapFactory.decodeFile(filePath)
        val compressedFile = createImageFile(fileName)
        decodedBitmap?.let {
            writeBitmapToFile(decodedBitmap, compressedFile)
        }

        if (!compressedFile.sizeAllowed()) {
            viewModelScope.launch {
                enbdImageCompressor.compress(imageFile = compressedFile) {
                    size(DAO_MAX_ALLOWED_UPLOAD_IMAGE_SIZE)
                }
            }
        }
        kycDocument = filePath
        uploadManualCapture(UserCountryCode(userLocationCode))

    }



I hope this email finds you well. I am writing to request approval to work from home for the period of 26th February 2024 to 8th March 2024 due to some urgent and important matters that require my presence.

I assure you that I am fully equipped to fulfill my responsibilities remotely and will remain accessible during regular working hours. If there are any pressing matters that require my physical presence at the office during this time, I am committed to returning immediately.

Your understanding and approval of this request are greatly appreciated. Please let me know if you need any further details or if there are specific procedures to follow.

Thank you for your consideration.


I hope this message finds you well. I'd like to highlight a critical issue in the ENBD login page that's affecting Liv users. When users return to the login screen from the DAO flow or after logging out, the Login and "Apply for an Account" buttons become invisible. Users are forced to exit the application to proceed.

Please refer to the attached screenshot for clarity.

[Attach Screenshot]

This issue is causing significant user inconvenience. I kindly request your prompt attention to address and resolve this matter urgently.

Thank you for your swift action on this.

Best regards,


The problem arises when users navigate back to the login screen from the DAO flow or after logging out. In this scenario, the Login button and the "Apply for an Account" buttons are not visible. Users are unable to proceed with logging in again or continuing with the DAO flow without exiting the application.


Changes: 
DashboardHomeBannerExtension
At Line 301:


else if (cmsDashboardBanner?.id.equals(DashboardConstants.BannerType.ACTIVATE_DEBIT_CARD) && !cmsDashboardBanner?.displayInDashboard.safeGet()){
                        cmsDashboardBanner?.let {
                            DashboardBanner(
                                bannerId = it.id,
                                type = DashboardConstants.BannerType.ACTIVATE_DEBIT_CARD,
                                title = it.title,
                                description = it.description,
                                buttonText = it.ctaText?.convertHtmlToText(),
                                bannerType = BannerMessageTypes.BANNERICONINVISIBLE,
                                isDismissible = it.dismissible,
                                displayInDashboard = true,
                                smartPassCheckEnabled = it.smartPassCheckEnabled,
                                cmsMediaKey = DAOBANNERICON
                            )
                        }
                    }

LivXDashboardFragment: 
Line 1098: DashboardConstants.BannerType.ACTIVATE_DEBIT_CARD -> {
                    deepLinkManager.navigateToDestination(DeepLinkManager.ACTIVATE_DEBIT_CARD) // regarding this I have a doubt if this will work or not.
                }

DashboardConstants: 

const val ACTIVATE_DEBIT_CARD = "cardsservice"



DeepLinkManager:
const val ACTIVATE_DEBIT_CARD = "/cardsservice?topic=service-new-request-debit-cards&subTopic=service-new-request-debit-cards-activate-card"

findNavController().popBackStack(R.id.label_prelogin, false)

enum class DaoStagesEnums(val stage: Int) {
    NATIONAL_ID_CAPTURE(R.id.label_eida_verification_fragment),
    PASSPORT_CAPTURE(R.id.label_eida_verification_fragment),
    SELFIE_CAPTURE(R.id.label_action_personalinfo_contact),
    OTP_VERIFICATION_MOBILE(R.id.label_action_personalinfo_contact),
    OTP_VERIFICATION_EMAIL(R.id.label_action_personalinfo_contact),
    START_SOURCING(R.id.label_company_address_fragment),
    DEMOGRAPHIC_DETAILS(R.id.label_kyc_information_fragment),
    PROFESSIONAL_DETAILS(R.id.label_open_account_fragment),
    PACKAGE_SELECTION(R.id.label_customize_your_card_fragment),
    PRODUCT_SELECTION(R.id.label_customize_your_card_fragment),
    APPLICATION_SUBMISSION(R.id.label_set_new_password_fragment),
    T_AND_C(R.id.label_residency_information_fragment)
}

DashboardConstants.BannerType.ACTIVATE_DEBIT_CARD -> {
    val inactiveCard = injectedViewModel.cardManager.debitCards.value?.peek()?.firstOrNull { cardItem ->
        cardItem.status == CardStatus.INACTIVE
    } ?: injectedViewModel.cardManager.creditCards.value?.peek()?.firstOrNull { cardItem ->
        cardItem.status == CardStatus.INACTIVE
    }

    cardsViewModel.selectedCard.value = inactiveCard

    cardFlowGraph.setStartDestination(R.id.label_activate_card)
    findNavController().navigate(R.id.action_global_cards_flow)
}


 <!-- custom_radio_button.xml -->
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="vertical">

    <!-- First line -->
    <TextView
        android:id="@+id/text1"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textSize="16sp"
        android:textStyle="bold"
        android:text="Enroll for Switch Offer"
        android:textColor="@android:color/black"/>

    <!-- Second line -->
    <TextView
        android:id="@+id/text2"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textSize="14sp"
        android:text="Earn up to AED"
        android:textColor="@android:color/darker_gray"/>

    <!-- Third line -->
    <TextView
        android:id="@+id/text3"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textSize="12sp"
        android:text="Learn More"
        android:textColor="@android:color/gray"/>
</LinearLayout>


Could you please provide Rupali Vitthal Londhe (IT) with the tasks related to DAO so she can add them?

f (it.isEmpty()) {
                        setErrorLabelText(
                            getCmsString(
                                CmsKeyMapper.INVALIDAVGMONTHLYSALARY,
                                arrayListOf(injectedViewModel.averageMonthlyBalance)
                            )
                        )
                    } else {
                        setErrorLabelText(
                            getCmsString(
                                CmsKeyMapper.LOWAVGMONTHLYSALARY,
                                arrayListOf(injectedViewModel.averageMonthlyBalance)
                            )
                        )
                    }



{
  "data": [
    {
      "description": "Welcome to a package that provides enhanced transactional benefits. Your New account comes with",
      "links": [
        {
          "text": "Welcome to a ",
          "isMandatory": true,
          "url": "\/data\/common\/site-assets\/error-messages\/err_settings_cust_maxotpattempts_expired"
        },
        {
          "text": "enhanced transactional benefits",
          "isMandatory": false,
          "url": "\/data\/common\/site-assets\/error-messages\/err_settings_cust_maxotparrived"
        }
      ]
    },
    {
      "description": "Welcome to a package that provides enhanced transactional benefits. Your New account comes with",
      "links": [
        {
          "text": "Welcome to a ",
          "isMandatory": true,
          "url": "\/data\/common\/site-assets\/error-messages\/err_settings_cust_maxemailarrived"
        }
      ]
    }
  ]
}

val jsonString = """
        {
          "data": [
            {
              "description": "Welcome to a package that provides enhanced transactional benefits. Your New account comes with",
              "links": [
                {
                  "text": "Welcome to a ",
                  "isMandatory": true,
                  "url": "/data/common/site-assets/error-messages/err_settings_cust_maxotpattempts_expired"
                },
                {
                  "text": "enhanced transactional benefits",
                  "isMandatory": false,
                  "url": "/data/common/site-assets/error-messages/err_settings_cust_maxotparrived"
                }
              ]
            },
            {
              "description": "Welcome to a package that provides enhanced transactional benefits. Your New account comes with",
              "links": [
                {
                  "text": "Welcome to a ",
                  "isMandatory": true,
                  "url": "/data/common/site-assets/error-messages/err_settings_cust_maxemailarrived"
                }
              ]
            }
          ]
        }
    """.trimIndent()

    // Parse JSON string using Gson
    val gson = Gson()
    val response = gson.fromJson(jsonString, ApiResponse::class.java)

class DaoTncDynamicConsentViewHolder(
    private val daoTncDynamicConsentItemBinding: DaoTncDynamicConsentItemBinding,
) : BaseVH<DaoTncDynamicConsentItemResponse>(daoTncDynamicConsentItemBinding.root) {
    override fun bindItem(item: DaoTncDynamicConsentItemResponse) {
        daoTncDynamicConsentItemBinding.item = item
    }
}

<?xml version="1.0" encoding="utf-8"?>
<layout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools">

    <data>
        <variable
            name="item"
            type="com.emiratesnbd.core.data.repository.dao.tnc.model.DaoTncDynamicConsentItemResponse" />
    </data>

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content">

        <com.enbd.uicomponents.components.textview.EnbdTextView
            android:id="@+id/textViewKfsBullet"
            style="@style/EnbdTextView.FontSize5"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginHorizontal="@dimen/spacingXSmall"
            android:gravity="center"
            android:text="@{item.bulletPoint}"
            android:textColor="@color/gray800"
            app:layout_constraintEnd_toStartOf="@+id/textViewKfs"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="@+id/textViewKfs"
            tools:text="\u2022" />

        <com.enbd.uicomponents.components.textview.EnbdTextView
            android:id="@+id/textViewKfs"
            style="@style/EnbdTextView.FontSize5"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:gravity="start"
            android:textColor="@color/gray800"
            android:text="@{item.description}"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toEndOf="@id/textViewKfsBullet"
            app:layout_constraintTop_toTopOf="parent"
            tools:text="Welcome to a package that provides enhanced transactional benefits. Your New account comes with" />

    </androidx.constraintlayout.widget.ConstraintLayout>
</layout>

 class DaoTncDynamicConsentViewHolder(
    private val daoTncDynamicConsentItemBinding: DaoTncDynamicConsentItemBinding,
) : BaseVH<DaoTncDynamicConsentItemResponse>(daoTncDynamicConsentItemBinding.root) {

    override fun bindItem(item: DaoTncDynamicConsentItemResponse) {
        // Convert hyperlinks to clickable spannable text
        val clickableDescription = makeDescriptionClickable(item)
        daoTncDynamicConsentItemBinding.textViewKfs.text = clickableDescription
        daoTncDynamicConsentItemBinding.textViewKfs.movementMethod = LinkMovementMethod.getInstance()
    }

    private fun makeDescriptionClickable(item: DaoTncDynamicConsentItemResponse): SpannableString {
        val description = item.description
        val spannableString = SpannableString(description)

        // Iterate through links and make them clickable
        item.links.forEach { link ->
            val startIndex = description.indexOf(link.text)
            val endIndex = startIndex + link.text.length
            spannableString.setSpan(object : ClickableSpan() {
                override fun onClick(widget: View) {
                    // Handle link click event here
                    // You may want to open the link or perform some other action
                }
            }, startIndex, endIndex, SpannableString.SPAN_EXCLUSIVE_EXCLUSIVE)
        }

        return spannableString
    }
}



fun areAllLinksNotMandatory(data: List<DaoTncDynamicConsentItemResponse>): Boolean {
    for (item in data) {
        for (link in item.links) {
            if (link.isMandatory) {
                // If any link is mandatory, return false
                return false
            }
        }
    }
    // If no link is mandatory, return true
    return true
}




flavorDimensions  = ['app']

    productFlavors {
        enbd {
            dimension 'app'
            buildConfigField("String", "LOCAL_COUNTRY_CODE", "\"AE\"")
            buildConfigField("String", "LOCAL_CURRENCY_CODE", "\"AED\"")
        }

        ei {
            dimension 'app'
            buildConfigField("String", "LOCAL_COUNTRY_CODE", "\"AE\"")
            buildConfigField("String", "LOCAL_CURRENCY_CODE", "\"AED\"")
        }
    }



fun mapCountriesListToItem(
        countries: List<CmsCountry>?,
        countriesToBeFiltered: Array<BasicRecyclerViewItem>?,
        selectedCountryType: DaoSelectedCountryEnums
    ): List<BasicRecyclerViewItem> {
        return countries?.let {
            val countriesList =
                countrySelectionMapper.mapCmsCountryItemToBaseRecyclerItemDao(
                    it,
                    selectedCountryType
                )
            countriesToBeFiltered?.let { filteredCountries ->
                countriesList.minus(filteredCountries.toList()) { country -> country.id }
            } ?: run {
                countrySelectionMapper.mapCmsCountryItemToBaseRecyclerItemDao(
                    it,
                    selectedCountryType
                )
            }
        } ?: emptyList()
    }

fun mapCountriesListToItem(
    countries: List<CmsCountry>?,
    countriesToBeFiltered: Array<BasicRecyclerViewItem>?,
    selectedCountryType: DaoSelectedCountryEnums
): List<BasicRecyclerViewItem> {
    if (countries == null) return emptyList()

    val countriesList = countrySelectionMapper.mapCmsCountryItemToBaseRecyclerItemDao(
        countries, selectedCountryType
    )

    return countriesToBeFiltered?.let { filteredCountries ->
        countriesList.filterNot { country -> 
            filteredCountries.any { it.id == country.id }
        }
    } ?: countriesList
}



For Microsoft Teams, a markdown-style table should work well. Here’s the table formatted for easy copying:

| **JIRA Issue** | **Status**          | **Remarks**                                                                 |
|----------------|---------------------|------------------------------------------------------------------------------|
| [TB-37961](https://jira.emiratesnbd.com/browse/TB-37961) | Fixed | API throws error for the first time, successful the second time. Could be a backend issue, not related to Modularization. |
| [TB-37979](https://jira.emiratesnbd.com/browse/TB-37979) | Unable to reproduce | Please attach video for reference.                                           |
| [TB-37980](https://jira.emiratesnbd.com/browse/TB-37980) | Unable to reproduce | Please attach video for reference.                                           |
| [TB-37996](https://jira.emiratesnbd.com/browse/TB-37996) | Fixed | Fixed, please check.                                                         |
| [TB-37997](https://jira.emiratesnbd.com/browse/TB-37997) | Fixed | Fixed, please check.                                                         |
| [TB-38128](https://jira.emiratesnbd.com/browse/TB-38128) | Existing issue | This is an existing issue. Tested on the latest regression build.            |
| [TB-38123](https://jira.emiratesnbd.com/browse/TB-38123) | In Progress | Not able to reproduce yet due to DAO drop off. Will try to reproduce and verify. |

This format should be easy to copy directly into Microsoft Teams and maintain the table structure.

If the table formatting is not preserving well in Microsoft Teams, using a more basic format may work better. Here’s a version that uses simple lines and spacing, which should copy correctly into Teams:

---

**JIRA Issues Update:**

- **TB-37961**: Fixed  
  *Remarks:* API throws error for the first time, successful the second time. Could be a backend issue, not related to Modularization.

- **TB-37979**: Unable to reproduce  
  *Remarks:* Please attach video for reference.

- **TB-37980**: Unable to reproduce  
  *Remarks:* Please attach video for reference.

- **TB-37996**: Fixed  
  *Remarks:* Fixed, please check.

- **TB-37997**: Fixed  
  *Remarks:* Fixed, please check.

- **TB-38128**: Existing issue  
  *Remarks:* This is an existing issue. Tested on the latest regression build.

- **TB-38123**: In Progress  
  *Remarks:* Not able to reproduce yet due to DAO drop off. Will try to reproduce and verify.

---

This should retain the structure when pasted into Teams.

Please update this table:

1. https://jira.emiratesnbd.com/browse/TB-37961 --> Fixed, Remarks:API throws error for the first time second time it's successfull. It could be a backend issue. Its not relared to Modualrization.

2. https://jira.emiratesnbd.com/browse/TB-37979 --> Unable to reproduce, Remarks: please attach video for reference

3. https://jira.emiratesnbd.com/browse/TB-37980 --> Unable to reproduce, Remarks: Please attach video for the reference

4.https://jira.emiratesnbd.com/browse/TB-37996 --> Fixed, Remarks: Fixed please check

5. https://jira.emiratesnbd.com/browse/TB-37997 --> Fixed, Remarks: Fixed please check

6. https://jira.emiratesnbd.com/browse/TB-38128 --> Existing issue, Remarks: This is an existing issue. Tested on the latest regression build

7. https://jira.emiratesnbd.com/browse/TB-38123 --> In Progress, Remarks: Not able to reproduce till now, becuase of DAO drop off. Will try to reproduce and verify



Here is the table with the given information:
Here is the table with the given information:

JIRA URL	Status	Remarks
TB-37961	Fixed	API throws error for the first time; second time it's successful. Could be a backend issue. Not related to Modularization.
TB-37979	Unable to reproduce	Please attach video for reference.
TB-37980	Unable to reproduce	Please attach video for the reference.
TB-37996	Fixed	Fixed. Please check.
TB-37997	Fixed	Fixed. Please check.
TB-38128	Existing issue	This is an existing issue. Tested on the latest regression build.
TB-38123	In Progress	Not able to reproduce till now due to DAO drop-off. Will try to reproduce and verify.


JIRA URL                                                                 | Status          | Remarks
----------------------------------------------------------------------------|-----------------|---------------------------------------------------------------------------
https://jira.emiratesnbd.com/browse/TB-37961 | Fixed           | API throws error for the first time; second time it's successful. Could be a backend issue. Not related to Modularization.
https://jira.emiratesnbd.com/browse/TB-37979 | Unable to reproduce | Please attach video for reference.
https://jira.emiratesnbd.com/browse/TB-37980 | Unable to reproduce | Please attach video for the reference.
https://jira.emiratesnbd.com/browse/TB-37996 | Fixed           | Fixed. Please check.
https://jira.emiratesnbd.com/browse/TB-37997 | Fixed           | Fixed. Please check.
https://jira.emiratesnbd.com/browse/TB-38128 | Existing issue  | This is an existing issue. Tested on the latest regression build.
https://jira.emiratesnbd.com/browse/TB-38123 | In Progress     | Not able to reproduce till now due to DAO drop-off. Will try to reproduce and verify.



 public async findOperatingCountriesAndSelectData() {
        const uiScrollBuilder = await this.scrollViewUIBuilder;
        await new UiComponents().scrollDown(100, await this.btnContinue, async (_) => {
            await this.textInputOperatingCountries.click();
            await this.textCountryAlbania.click();
        }, async (error) => {
            console.log(error);
        }, uiScrollBuilder || undefined);
    };
    
    public async findContinueAndFillData() {
        const uiScrollBuilder = await this.scrollViewUIBuilder;
        await new UiComponents().scrollDown(100, await this.btnContinue, async (_) => {
            // await this.textInputOperatingCountries.click();
            // await this.textCountryAlbania.click();
            await this.textInputNatureOfBusiness.click();
            await this.textCropsCultivation.click();
            await this.textInputBusinessTurnOver.click();
            await this.textOwnershipPercentageValue.click();
            await this.textInputBusinessActivities.click();
            await this.textBasicBankingCards.click();
            await this.btnContinue.click();
        }, async (error) => {
            console.log(error);
        }, uiScrollBuilder || undefined);
    };

public async findOperatingCountriesAndSelectData() {
    await this.scrollAndPerformAction(async () => {
        await this.textInputOperatingCountries.click();
        await this.textCountryAlbania.click();
    });
}

public async findContinueAndFillData() {
    await this.scrollAndPerformAction(async () => {
        await this.textInputNatureOfBusiness.click();
        await this.textCropsCultivation.click();
        await this.textInputBusinessTurnOver.click();
        await this.textOwnershipPercentageValue.click();
        await this.textInputBusinessActivities.click();
        await this.textBasicBankingCards.click();
        await this.btnContinue.click();
    });
}

private async scrollAndPerformAction(action: () => Promise<void>) {
    const uiScrollBuilder = await this.scrollViewUIBuilder;
    try {
        await new UiComponents().scrollDown(100, await this.btnContinue, action, async (error) => {
            console.error('Error occurred during scroll action:', error);
        }, uiScrollBuilder || undefined);
    } catch (error) {
        console.error('Error in scrollAndPerformAction:', error);
    }
}



